#!/usr/bin/env ruby

# Console Unfuddle
# by Makarchev K. 2011
# by Varamashvili M. 2011

$KCODE='u'

require 'rubygems'
require 'yaml'
require 'active_support'
require 'active_support/time'
require File.expand_path(File.join(File.dirname(__FILE__), %w(lib unfuzzle lib unfuzzle) ))
require 'thor'
require 'readline'

class Unfuddle < Thor

  UNFUDDLE_ENC = "utf-8"
  WIN_ENC = "cp866"
  CMD_WIN_ENC = "windows-1251"
  HOME_DIR = ENV['HOME']
  PASS_FILE = File.expand_path("#{HOME_DIR}/.passwd_to_unfuddle.yml")
  CACHED_PEOPLE = "#{HOME_DIR}/.cached_people.yml"
  CACHED_PROJECTS = "#{HOME_DIR}/.cached_projects.yml"
  CACHED_TICKETS = "#{HOME_DIR}/.cached_tickets.yml"
  DAY = 60 * 60 * 24
  CACHED_PERIOD = 10 * DAY
  CACHED_PROJECTS_PERIOD = 10 * DAY
  CACHED_TICKETS_PERIOD = 60 * 60

  attr_accessor :default_project_ids

  def initialize(*args)
    unless File.exists?(PASS_FILE)
      say "Error: you should create #{PASS_FILE} file", :red, true
      exit 1
    end

    pass = YAML.load_file(PASS_FILE)
    Unfuzzle.subdomain = pass['subdomain']
    Unfuzzle.username  = pass['username']
    Unfuzzle.password  = pass['password']
    Unfuzzle.use_ssl   = true

    self.default_project_ids = pass['default_project_ids']
    self.default_project_ids = cached_projects.keys if default_project_ids.blank? || (self.default_project_ids & cached_projects.keys).empty?

    unless me_id
      say "Error: no matches for me", :red, true
      exit 1
    end

    @started_at = Time.now

    super
  end


private
  WIN = RUBY_PLATFORM['mingw'] || RUBY_PLATFORM['mswin']
  require 'iconv' if WIN

  if WIN    
    def say(*args)
      args[0] = Iconv.new(WIN_ENC, UNFUDDLE_ENC).iconv(args.at(0).to_s) rescue args.at(0).to_s
      super
    end
  end

  def enc_input(text)
    if WIN
      Iconv.new(UNFUDDLE_ENC, WIN_ENC).iconv(text.to_s)
    else
      text
    end    
  end

  def enc_cmd(text)
    if WIN
      Iconv.new(UNFUDDLE_ENC, CMD_WIN_ENC).iconv(text.to_s)
    else
      text
    end    
  end

  def default_project_id
    self.default_project_ids.first
  end

  def color(prio)
    case prio
      when 1; :blue
      when 2; :cyan
      when 3; nil
      when 4; :red
      when 5; :on_red
    end
  end

  def read_text
    lines = []
    while line = Readline::readline("> ")
      lines << line
    end

  rescue Interrupt => e
    lines

  ensure
    enc_input(lines * "\n")
  end

  # people {id => name}
  def people
    @people ||= {}.tap do |h|
      cached_people.each{|id, data| h[id] = data[:name] }
    end
  end

  # cached people
  def cached_people
    return @cached_people if @cached_people

    # cached peoples
    if File.exists?(CACHED_PEOPLE) && File.ctime(CACHED_PEOPLE) > (Time.now - CACHED_PERIOD)
      @cached_people = YAML.load_file(CACHED_PEOPLE)
    else
      people = Unfuzzle::Person.all
      @cached_people = {}
      people.each do |person|
        @cached_people[person.id] = {:name => person.last_name.to_s + " " + person.first_name.to_s.mb_chars[0] + ".", :login => person.username}
      end
      File.open(CACHED_PEOPLE, 'w'){|f| f.write(YAML.dump(@cached_people))}
    end

    @cached_people
  end
  
  # my id
  def me_id
    @me_id ||= cached_people.detect{|id, data| data[:login] == Unfuzzle.username}.at(0)
  end

  def me  
    @me ||= people[me_id]
  end


  def cached_projects
    return @cached_projects if @cached_projects

    # cached peoples
    if File.exists?(CACHED_PROJECTS) && File.ctime(CACHED_PROJECTS) > (Time.now - CACHED_PROJECTS_PERIOD)
      @cached_projects = YAML.load_file(CACHED_PROJECTS)
    else
      projects = Unfuzzle.projects
      @cached_projects = {}
      projects.each do |project|
        @cached_projects[project.id] = project.name
      end
      File.open(CACHED_PROJECTS, 'w'){|f| f.write(YAML.dump(@cached_projects))}
    end

    @cached_projects
  end

  def cached_tickets
  end
 
  # === Methods ===

  # find persons by regexp, if blank than find me
  def find_persons(regx = "")
    return nil if regx.nil?

    res = []
    if regx == ""
      return [me_id]
    else
      regx = enc_cmd(regx)
      res = people.select{|id, login| login.mb_chars.downcase =~ /#{regx.mb_chars.strip.downcase}/i}
    end

    if !res.empty?
      res.map &:first
    else
      say "no peoples matched #{regx}"
      []
    end
  end

  def show_projects #!
    projects = Unfuzzle.projects

    say "    ", nil, false
    say "id".ljust(10), nil, false
    say "name".ljust(20), nil, false
    say 'title'.ljust(20), nil, false
    say "disk-usage"

    projects.each do |project|
      say "    ", nil, false
      say project.id.to_s.ljust(10), :yellow, false
      say project.slug.ljust(20), :green, false
      say project.name.ljust(20), nil, false
      say project.disk_usage
    end
  end

  # Ticket Heads

  def render_ticket_head(ticket)
    color = color(ticket.priority)
    say ticket.number.to_s.ljust(6), :yellow, false
    say ticket.title.mb_chars[0..60].ljust(65), color, false
    say ticket.status.ljust(14), color, false
    say people[ticket.reporter_id].to_s.mb_chars.ljust(15), color, false
    say people[ticket.assignee_id].to_s.mb_chars.ljust(15), color, false
    say ticket.hours.to_s, color, true
  end
  
  def render_ticket_heads(tickets)
    groups = {}
    tickets.each do |ticket|
      groups[ticket.status] ||= []
      groups[ticket.status] << ticket
    end
    
    groups.each do |group, tickets|
      tickets = tickets.sort_by{|t| t.number.to_i}
      tickets.each{|ticket| render_ticket_head(ticket) }
      say ''
    end
  end

  def render_ticket_heads_by_people(t)
    groups = {}
    t.each do |ticket|
      groups[ticket.assignee_id] ||= []
      groups[ticket.assignee_id] << ticket
    end

    groups.each do |ass_id, tickets|
      say "============== #{people[ass_id].to_s.mb_chars} ================", :on_red, true
      render_ticket_heads tickets
      say ''
    end
  end

  def render_ticket_heads_by_project(t)
    groups = {}
    t.each do |ticket|
      groups[ticket.project_id] ||= []
      groups[ticket.project_id] << ticket
    end

    groups.each do |project_id, tickets|
      say "Project => #{cached_projects[project_id]}: ", :yellow, true
      render_ticket_heads_by_people tickets
      say ''
    end
  end

  def show_all_active_tickets(name = nil, all_projects = false) #!
    ass_ids = find_persons(name == "" ? nil : name) || []
    t = Unfuzzle::Ticket.all_by_dinamic_report(all_projects ? nil : default_project_ids, false)
    t.reject!{|ticket| !ass_ids.blank? && !ass_ids.include?(ticket.assignee_id) }
    render_ticket_heads_by_project t
  end  
  
  def show_my_tickets(all_projects = false) #!
    t = Unfuzzle::Ticket.all_by_dinamic_report(all_projects ? nil : default_project_ids, true)
    render_ticket_heads_by_project t
  end

  # TimeEntry

  def render_times(times)
    times = times.sort_by{|t| t.date.to_s }

    sum = 0
    title_present = false

    times.each do |time|
      #say time.ticket_id.to_s.ljust(8), :yellow, false
      title_present = true if time.title.present?
      say time.title.to_s.mb_chars[0..30].ljust(34), :yellow, false if title_present
      say time.description.mb_chars[0..50].ljust(54), nil, false
      say (time.hours.to_s + " h.").ljust(9), nil, false
      say people[time.person_id].to_s.mb_chars.ljust(13), nil, false
      say time.date, nil
      
      sum += time.hours.to_f      
    end
    
    say ''.ljust(34), nil, false if title_present
    say ''.ljust(54), nil, false
    say (sum.to_s + " h.").ljust(10), :red, true
    
    sum
  end
  
  def render_people_times(times)
    groups = {}
    times.each do |time|
      groups[time.person_id] ||= []
      groups[time.person_id] << time
    end
    
    groups.each do |group, times|
      say "============== #{people[group].to_s.mb_chars} ================", :on_red, true
      render_times(times)
      say ''
    end
  end

  def filter_times(times, for_id = nil)
    times.select do |time|
      time.person_id == for_id
    end
  end

  def times_report(me = false, period = 0)
    p = periods(period)
    t = Unfuzzle::TimeEntry.time_invested(default_project_id, p.at(0), p.at(1))
    t = filter_times(t, me_id) if me
    render_people_times(t)
  end

  def all_times_report(me = false, period = 0)
    p = periods(period)
    t = Unfuzzle::TimeEntry.all_time_invested(p.at(0), p.at(1))
    t = filter_times(t, me_id) if me
    render_people_times(t)
  end

  def periods(period)
    case period
      when 'tm' then [Time.now.beginning_of_month, Time.now]
      when 'lm' then [(Time.now.beginning_of_month-1.seconds).beginning_of_month, (Time.now.beginning_of_month-1.seconds)]
      when 'tw' then [Time.now.beginning_of_week, Time.now]
      when 'lw' then [(Time.now.beginning_of_week-1.seconds).beginning_of_week, (Time.now.beginning_of_week-1.seconds)]
      when 'y' then [(Time.new - 1.day).beginning_of_day, ((Time.new - 1.day).end_of_day)]
      else [Time.now - period.to_i * DAY, Time.now]
    end
  end

  # Ticket

  def render_comment(cm)
    say people[cm.author_id].to_s.mb_chars, :on_blue, false
    say "  " + cm.created_at.to_s, nil, true
    say cm.body.mb_chars, nil, true
  end

  def render_ticket(t, comments = [], time_entries = [])
    color = color(t.priority)

    say t.number.to_s, :on_red
    say t.title.to_s.mb_chars, :on_blue
    say cached_projects[t.project_id].to_s, color, true
    say t.status, color
    say t.priority_name, color    
    say people[t.reporter_id].to_s + " => " + people[t.assignee_id].to_s, color, true
    say t.description.to_s.mb_chars, color, true
    say t.hours.to_s + " h.", color

    if !time_entries.blank?
      say ''
      say "Time Entries: ", :blue, true
      render_times(time_entries)
    end

    if !comments.blank?
      say ''
      say 'Comments: ', :on_red, true
      comments.each{|cm| render_comment(cm) }
    end
  end

  def show_ticket(num, opt)
    t, cm = Unfuzzle::Ticket.find_first_by_project_id_and_number_with_comments(default_project_id, num)
    times = (opt == "t") ? Unfuzzle::TimeEntry.all_for_ticket(t) : []
    render_ticket(t, cm, times)
  end

  # 
  def update_tickets(tickets, new_status)
    tickets = tickets.split(",").map &:strip
    if !tickets.blank? && !new_status.blank?
      ts = tickets.map{|num| Unfuzzle::Ticket.find_first_by_project_id_and_number(default_project_id, num) rescue nil }.compact
      say "Update tickets #{ts.map(&:number) * ','} to status #{new_status}"

      ts.each do |t|
        t.status = new_status
        t.update
        render_ticket(t)
      end
    else
      say "no one tickets"
    end
  end
  
  def update_tickets_assignee(tickets, new_assignee)
    tickets = tickets.split(",").map &:strip
    if !tickets.blank?
      ts = tickets.map{|num| Unfuzzle::Ticket.find_first_by_project_id_and_number(default_project_id, num) rescue nil }.compact
 
      # find person
      ass_ids = find_persons(new_assignee)
      exit 1 if ass_ids.size < 1

      person = people[ass_ids.first]

      say "Update tickets #{ts.map(&:number) * ','} to assignee #{person}"

      ts.each do |t|
        t.assignee_id = ass_ids.first
        t.update
        render_ticket(t)
      end
    else
      say "no one tickets"
    end
  end
  
  def new_ticket(title, assignee = "", priority = 3)
    # find user
    ass_id = find_persons(assignee).first

    prio = priority.blank? ? 3 : priority.to_i

    t = Unfuzzle::Ticket.new
    t.title = enc_cmd(title)
    t.assignee_id = ass_id
    t.reporter_id = find_persons.first # me
    t.priority = prio
    t.project_id = default_project_id

    say "Now enter description"    
    t.description = read_text

    say "Create ticket: ", nil, true
    say t.title, nil, true
    say t.description, nil, true
    say people[t.assignee_id]
    say ''

    t.create
    #t = Unfuzzle::Ticket.find_first_by_project_id_and_number_with_comments(project_id, number)
    
    render_ticket(t)
  end

  def add_comment(number)
    t, cms = Unfuzzle::Ticket.find_first_by_project_id_and_number_with_comments(default_project_id, number)
    
    say "Enter body of comment: ", :red, true
    text = read_text
    
    cm = Unfuzzle::Comment.new
    cm.body = text
    cm.author_id = me_id
    
    cm.create(t.project_id, t.id)
    
    cms += [cm]
    
    render_ticket(t, cms)
  end

  def add_time(number, hours, comment = "", date = "")
    t, cms = Unfuzzle::Ticket.find_first_by_project_id_and_number_with_comments(default_project_id, number)
    
    time = Unfuzzle::TimeEntry.new
    time.description = enc_cmd(comment)
    time.hours = hours
    time.ticket_id = t.id
    time.date = date.blank? ?  Time.now.strftime("%Y-%m-%d") : date
    time.person_id = me_id
    
    time.create(t.project_id, t.id)

    times = Unfuzzle::TimeEntry.all_for_ticket(t)
    
    t.hours = (t.hours.to_f + time.hours.to_f).to_s
    render_ticket(t, cms, times)
  end

  def a
    t = Unfuzzle::Ticket.all_by_dinamic_report
    t.each do |tt|
      say tt.title.to_s.mb_chars, :blue, false
    end
  end

public

  desc "projects", "show all projects for your account"
  def projects
    show_projects
  end

  desc "all [REGEXP]", "show all tickets"
  def all(regexp = "")
    show_all_active_tickets(regexp)
  end

  desc "my", "show tickets assignee to me"
  def my
    show_my_tickets
  end

  desc "show NUMBER [t]", "show ticket by number, [t] - show TimeEntries"
  def show(number, opt = "")
    show_ticket(number, opt)
  end

  # Upd
  desc "upd TICKETS NEW_STATUS", "update tickets statuses"
  def upd(tickets, new_status)
    update_tickets(tickets, new_status)
  end

  desc "assi TICKETS [NEW_ASSIGNEE]", "update tickets assingee"
  def assi(tickets, new_assignee = "")
    update_tickets_assignee(tickets, new_assignee)
  end

  desc "clear", "clear caches"
  def clear
    require 'fileutils'
    FileUtils.rm(CACHED_PEOPLE) rescue nil
    FileUtils.rm(CACHED_PROJECTS) rescue nil
    say "cached cleared"
  end

  # Times
  desc "tm PERIOD", "show my times report (PERIOD = [tm lm tw lw y [0-9]+])"
  def tm(period = 0)
    times_report(true, period)
  end

  desc "t PERIOD", "show all times report (PERIOD = [tm lm tw lw y [0-9]+])"
  def t(period = 0)
    times_report(false, period)
  end

  desc "atm PERIOD", "show my times report for account (PERIOD = [tm lm tw lw y [0-9]+])"
  def atm(period = 0)
    all_times_report(true, period)
  end

  desc "at PERIOD", "show all times report for account (PERIOD = [tm lm tw lw y [0-9]+])"
  def at(period = 0)
    all_times_report(false, period)
  end

  # Add
  desc "addt NUMBER HOURS COMMENT [DATE]", "add time"
  def addt(ticket_number, hours, comment, date = nil)
    add_time(ticket_number, hours, comment, date)
  end

  desc "addcm NUMBER", "add ticket comment"
  def addcm(ticket_number)
    addcm(ticket_number)
  end

  desc "new TITLE [ASSIGNEE] [PRIO]", "create ticket"
  def new(title, assignee = "", priority = 3)
    update_tickets(title, assignee, priority)
  end

  desc "test", "test action"
  def test
  end

  default_task(:my) # by default
end

Unfuddle.start
